library(bigrquery)
library(dplyr)
library(keyring)
library(googlesheets)
library(magrittr)
library(readr)
library(readxl)
library(RMySQL)
library(sqldf)
library(tidyr)
library(tm)
system(key_get("ssh"))
con <- dbConnect(MySQL(),
user = key_get("sql_username"),
password = key_get("sql_password"),
host = '127.0.0.1',
port = 3307,
dbname = 'metrics')
query <- function(...) dbGetQuery(con, ...)
options(sqldf.driver = "SQLite")
# Import accounts phased dataset
accounts_dated <- read.csv("jan15-17comms.csv", stringsAsFactors = FALSE)
# Add Region for mykobzar
accounts_dated$Region[accounts_dated$account_name=="mykobzar"] <- "AMER"
# Define Phases data frame
phase_dates = list(c("January 24, 2019", "January 31, 2019",
"February 7, 2019", "February 14, 2019", "February 21, 2019", "February 28, 2019",
"March 7, 2019", "March 14, 2019", "March 21, 2019", "March 28, 2019",
"April 2, 2019"))
phase_numbers = list(c(1:11))
phases <- do.call(rbind, Map(data.frame, phase_numbers, phase_dates))
names(phases)[1] <- "Phase"
names(phases)[2] <- "upgrade_date"
#Import and update deferrals
deferrals <- gs_title("PHP 7.2 Conversion Deferral List") %>% gs_read(ws = 1, skip = 4, colnames = TRUE)
deferrals_trimmed <- deferrals %>% select(Account) %>% unique() #eliminate any duplicates
deferrals_trimmed$deferred <- TRUE
colnames(deferrals_trimmed)[1] <- "account_name"
#Remove capitalization in account names
deferrals_trimmed$account_name <-sapply(deferrals_trimmed$account_name , tolower)
#Import and update deferrals
deferrals <- gs_title("PHP 7.2 Conversion Deferral List") %>% gs_read(ws = 1, skip = 4, colnames = TRUE)
deferrals_trimmed <- deferrals %>% select(Account) %>% unique() #eliminate any duplicates
deferrals_trimmed$deferred <- TRUE
colnames(deferrals_trimmed)[1] <- "account_name"
deferrals_trimmed <- deferrals %>% select(Account) %>% unique() #eliminate any duplicates
View(deferrals)
#Import and update deferrals
deferrals <- gs_title("PHP 7.2 Conversion Deferral List") %>% gs_read(ws = 1, skip = 6, colnames = TRUE)
deferrals_trimmed <- deferrals %>% select(Account) %>% unique() #eliminate any duplicates
deferrals_trimmed$deferred <- TRUE
colnames(deferrals_trimmed)[1] <- "account_name"
deferrals <- gs_title("PHP 7.2 Conversion Deferral List") %>% gs_read(ws = 1, skip = 5, colnames = TRUE)
deferrals_trimmed <- deferrals %>% select(Account) %>% unique() #eliminate any duplicates
deferrals_trimmed$deferred <- TRUE
colnames(deferrals_trimmed)[1] <- "account_name"
#Remove capitalization in account names
deferrals_trimmed$account_name <-sapply(deferrals_trimmed$account_name , tolower)
#Seperate account concat and group to remove duplicates
accounts_dated_seperated <- accounts_dated %>% select(-account_name) %>% separate_rows(account_concat, sep = ",") %>% rename(account_name=account_concat)
accounts_dated_seperated_grouped<-sqldf("SELECT account_name,upgrade_date,region FROM accounts_dated_seperated GROUP BY account_name,upgrade_date")
library(mailR)
# Set working directory - add project folder
setwd("~/Documents/Github/anewhope")
df <- read.csv("anh_environs.csv")
View(df)
valid.email(df['comlink_address'])
send.mail(david.noland@wpengine.com)
send.mail("david.noland@wpengine.com")
valid.email(df)
mailR::send.mail("david.noland@wpengine.com", "dnoland72@gmail.com", send = FALSE, debug = TRUE)
mailR::send.mail("david.noland@wpengine.com", "dnoland72@gmail.com", smtp = list(host.name = "aspmx.l.google.com", port = 25), send = FALSE, debug = TRUE)
mailR::send.mail("david.noland@wpengine.com", "dnoland72@gmail.com", subject = "test", body = "test", smtp = list(host.name = "aspmx.l.google.com", port = 25), send = FALSE, debug = TRUE)
validate_emails <- function (x){
match <- grepl("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$", x, perl=TRUE)
if(!match) stop("invalid input")
}
validate_emails(df['comlink_address'])
validate_emails <- function (x){
match <- grepl("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$", x, perl=TRUE)
if(!match) stop("invalid input")
}
validate_emails <- function (x){
match <- grepl("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$", x, perl=TRUE)
if (!match) {
stop("invalid input")
}
if (!match): {
stop("invalid input")
}
validate_emails <- function (x){
match <- grepl("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$", x, perl=TRUE)
if (!match):
stop("invalid input")
}
